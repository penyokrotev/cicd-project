name: Master branch
on:
  push:
    branches:
      - master
jobs:

  update_release_draft:
    name: Release
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  checkstyle_job:
    runs-on: ubuntu-latest
    needs: update_release_draft
    name: Checkstyle job
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Run check style
      uses: nikitasavinov/checkstyle-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: 'github-check'
        tool_name: 'testtool'
        
  sca:
    name: SCA job Snyk
    runs-on: ubuntu-latest
    needs: checkstyle_job
    steps:
      - uses: actions/checkout@master
      - name: Change wrapper permissions
        run: chmod +x ./gradlew
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk11@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
          
  sast:
    name: SAST job Sonarcloud
    runs-on: ubuntu-latest
    needs: checkstyle_job
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Change wrapper permissions
        run: chmod +x ./gradlew  
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube --info
        
  build:
    name: Build Docker image
    needs: [ sast, sca ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo code
      uses: actions/checkout@v2 
    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build the Docker image
      run: | 
        docker build . --file Dockerfile --tag penyo/devops-u11:$GITHUB_SHA
        docker push penyo/devops-u11:$GITHUB_SHA
    - name: Scan image for vulnerabilities     
      uses: azure/container-scan@v0
      with: 
        image-name: penyo/devops-u11:${{ github.sha }}
      continue-on-error: true
      
  deploy-test:
    name: Deploy on Test env
    runs-on: ubuntu-latest
    needs: build
    steps:
    - run: echo "Deploy to TEST"
 
  automation-tests:
    name: Execution of Automation Tests
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
    - run: echo "Executing Automation Tests"
      
  deploy-prod:
    name: Minikube Cluster production deployment
    runs-on: ubuntu-latest
    needs: automation-tests
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.4.3
      with:
          minikube version: 'v1.24.0'
          kubernetes version: 'v1.23.0'
          driver: docker
          github token: ${{ secrets.GITHUB_TOKEN }}
    - name: Interact with the cluster
      run: kubectl get nodes
    - name: Try the cluster
      run: kubectl get pods -A
    - name: Create a secret for Dockerhub
      run: | 
        kubectl create secret docker-registry my-secret --docker-server=https://hub.docker.com --docker-username=${{ secrets.DOCKER_USERNAME }} --docker-password=${{ secrets.DOCKER_PASSWORD }}
        kubectl get secret    
    - name: Deploy to minikube
      run: |
        echo TAG=$GITHUB_SHA > file.txt
        export $(xargs < file.txt)
        echo $TAG
        envsubst < deploy/deploy-to-minikube.yaml | kubectl apply -f -
        sleep 30
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        echo -n "verifying images:"
        docker images
        kubectl get all
    - name: Test service URLs
      run: |
        minikube service example
        kubectl get svc -o wide
        kubectl get ep -o wide
        echo "------------------opening the service------------------"
        export CLUSTER_IP=$(kubectl get service example --output='jsonpath={.spec.clusterIPs[0]}')
        kubectl run -i --rm --image=curlimages/curl --restart=Never test-curl -- -sSL http://$CLUSTER_IP:8080
        
  notification_without_optional_params:
    needs: deploy-prod
    name: MS Teams Notification
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: always()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}        
